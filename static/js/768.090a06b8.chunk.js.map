{"version":3,"file":"static/js/768.090a06b8.chunk.js","mappings":"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","sources":["routes/Detail.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport { addItem } from \"../store.js\";\r\n\r\n// context API를 가져다 쓰기 위한 문법 2개\r\nimport { Context1 } from './../App.js'\r\n\r\nlet YellowBtn = styled.button`\r\n    background: ${props => props.bg};\r\n    color: ${props => props.bg == 'blue' ? 'white' : 'black'};\r\n    padding: 10px;\r\n`\r\n\r\n// let NewBtn = styled.button(YellowBtn)`\r\n//     // 커스텀하면 됨\r\n// `\r\n\r\nlet Box = styled.div`\r\n    background: grey;\r\n    padding: 20px;\r\n`\r\n\r\nfunction Detail(props) {\r\n\r\n    let { context } = useContext(Context1); // 보관함 해체 ex) { state1, state2 }\r\n\r\n    let [count, setCount] = useState(0);\r\n    let [alert, setAlert] = useState(true);\r\n    let [text, setText] = useState('');\r\n    let [tab, setTab] = useState(0);\r\n    let { id } = useParams();\r\n    let item = props.shoes.find((x) => {\r\n        return x.id == id;\r\n    });\r\n    let idNum = Number(id);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let getWatched = localStorage.getItem('watched');\r\n        getWatched = JSON.parse(getWatched);\r\n        getWatched.push(item.id);\r\n\r\n        getWatched = new Set(getWatched); // set은 중복 제거\r\n        getWatched = Array.from(getWatched);\r\n        \r\n        localStorage.setItem('watched', JSON.stringify(getWatched));\r\n    }, []);\r\n\r\n    // useEffect()는 mount, update시 코드 실행\r\n    // useEffect는 시간이 오래걸리거나 어려울 것 같은, 예를들어\r\n    // 서버에서 데이터 가져오는 작업, 타이머같은 작업은 useEffect안에 작성하면 좋음\r\n    // [] 입력해주면 update시 코드 실행 x, []안에 예를들어 count가 들어가면 count가 update될 때 실행\r\n    useEffect(() => {\r\n        let timer = setTimeout(() => {\r\n            setAlert(false);\r\n        }, 2000);\r\n        // return은 옵션, useEffect동작 전에 실행되는 코드, 별명: clean up function\r\n        // clean up function은 mount시 실행x unmount시 실행\r\n        return () => {\r\n            // 기존 코드 치울 때 여기에 많이 작성\r\n            clearTimeout(timer);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isNaN(text) == true) {\r\n            alert('숫자만 입력하세요.');\r\n            console.log('숫자만 입력하세요.');\r\n        }\r\n    }, [text]);\r\n\r\n    // useEffect(() => { }) 1. 재 렌더링마다 코드실행할 때\r\n    // useEffect(() => { }, []) 2. mount시 코드를 1회만 실행할 때\r\n    // useEffect(() => {\r\n    //     return () => {\r\n    //         3. unmount시 코드를 1회만 실행할 때\r\n    //     }\r\n    // }, [])\r\n\r\n    let [fade, setFade] = useState();\r\n    useEffect(() => {\r\n        setFade('end');\r\n        return () => {\r\n            setFade('');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`container start ${fade}`}>\r\n            {\r\n                alert == true\r\n                    ? <div className=\"alert alert-warning\">\r\n                        2초이내 구매시 할인\r\n                    </div>\r\n                    : null\r\n            }\r\n            {/* {count}\r\n            <YellowBtn bg=\"blue\" onClick={() => { setCount(count + 1); }}>버튼</YellowBtn>\r\n            <YellowBtn bg=\"orange\">버튼</YellowBtn> */}\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <img src={'https://codingapple1.github.io/shop/shoes' + (idNum + 1) + '.jpg'} width=\"100%\" />\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <input onChange={(e) => { setText(e.target.value) }}></input>\r\n                    <h4 className=\"pt-5\">{item.title}</h4>\r\n                    <p>{item.content}</p>\r\n                    <p>{item.price}원</p>\r\n                    <YellowBtn bg=\"grey\" onClick={() => {\r\n                        dispatch(addItem({id : item.id, name : item.title, count : 1}));\r\n                    }}>\r\n                        주문하기</YellowBtn>\r\n                </div>\r\n            </div>\r\n            <Nav variant=\"tabs\" defaultActiveKey=\"link0\">\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link0\" onClick={() => setTab(0)}>버튼0</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link1\" onClick={() => setTab(1)}>버튼1</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link eventKey=\"link2\" onClick={() => setTab(2)}>버튼2</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n            <TabContent tab={tab} />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction TabContent({ tab }) { // {tab} == props.tab\r\n    // if (tab == 0) {\r\n    //     return <div>내용0</div>;\r\n    // }\r\n\r\n    // if (tab == 1) {\r\n    //     return <div>내용1</div>;\r\n    // }\r\n\r\n    // if (tab == 2) {\r\n    //     return <div>내용2</div>;\r\n    // }\r\n    let [fade, setFade] = useState();\r\n    useEffect(() => {\r\n        setTimeout(() => { setFade('end'); }, 10);\r\n        return () => {\r\n            setFade('');\r\n        }\r\n    }, [tab]);\r\n\r\n    return (<div className={`start ${fade}`}>\r\n        {\r\n            [<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][tab]\r\n        }\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Detail;"],"names":["YellowBtn","styled","props","bg","TabContent","tab","useState","fade","setFade","useEffect","setTimeout","className","useContext","Context1","context","alert","setAlert","text","setText","setTab","id","useParams","item","shoes","find","x","idNum","Number","dispatch","useDispatch","getWatched","localStorage","getItem","JSON","parse","push","Set","Array","from","setItem","stringify","timer","clearTimeout","isNaN","console","log","src","width","onChange","e","target","value","title","content","price","onClick","addItem","name","count","variant","defaultActiveKey","eventKey"],"sourceRoot":""}