{"version":3,"file":"static/js/149.1a9fff43.chunk.js","mappings":"gUAuCA,EAnC2BA,EAAAA,YAAiB,WAWzCC,GAAQ,IAVTC,EAUS,EAVTA,SACAC,EASS,EATTA,UACAC,EAQS,EARTA,QACAC,EAOS,EAPTA,SACAC,EAMS,EANTA,WACAC,EAKS,EALTA,MACAC,EAIS,EAJTA,KACAC,EAGS,EAHTA,QACAC,EAES,EAFTA,WACGC,GACM,YACHC,GAAoBC,EAAAA,EAAAA,IAAmBX,EAAU,SACjDY,EAAUC,IAAWZ,EAAWS,EAAmBH,GAAW,GAAJ,OAAOG,EAAP,YAA4BH,GAAWD,GAAQ,GAAJ,OAAOI,EAAP,YAA4BJ,GAAQJ,GAAW,GAAJ,OAAOQ,EAAP,YAA+C,kBAAZR,EAAP,kBAAyCA,GAAY,WAAaC,GAAY,GAAJ,OAAOO,EAAP,aAAqCN,GAAc,GAAJ,OAAOM,EAAP,eAAuCL,GAAS,GAAJ,OAAOK,EAAP,WAEjVI,GAAqBC,EAAAA,EAAAA,KAAK,SAAD,QAAC,UAAcN,GAAf,IAC7BR,UAAWW,EACXb,IAAKA,KAGP,GAAIS,EAAY,CACd,IAAIQ,EAAkB,GAAH,OAAMN,EAAN,eAMnB,MAJ0B,kBAAfF,IACTQ,EAAkB,GAAH,OAAMA,EAAN,YAAyBR,KAGtBO,EAAAA,EAAAA,KAAK,MAAO,CAC9Bd,UAAWe,EACXC,SAAUH,GAEb,CAED,OAAOA,CACR,I,8BC7BGI,GAAQC,EAAAA,EAAAA,OAAK,WAEb,OADAC,QAAQC,IAAI,mCACL,+CACV,IAuDD,MAjDA,YAEiBC,EAAAA,EAAAA,UAAQ,WAAQ,MALtB,4DAKmC,GAAE,IAA5C,IAEIC,GAAQC,EAAAA,EAAAA,KAAY,SAACD,GACrB,OAAOA,CACV,IAGGE,GAAWC,EAAAA,EAAAA,MACf,GAAwBC,EAAAA,EAAAA,UAAS,GAAjC,eAAKC,EAAL,KAAYC,EAAZ,KAEA,OACI,4BACI,SAACX,EAAD,CAAOU,MAAOA,KACd,mBAAQE,QAAS,WAAQD,EAASD,EAAM,EAAG,EAA3C,gBAEA,0BAAKL,EAAMQ,KAAKC,KAAhB,IAAuBT,EAAMQ,KAAKE,IAAlC,sCACA,mBAAQH,QAAS,WAAQL,GAASS,EAAAA,EAAAA,IAAS,GAAK,EAAhD,2BACA,UAAC,EAAD,YACI,4BACI,2BACI,+BACA,gDACA,0CACA,2DAGR,2BAEQX,EAAMY,KAAKC,KAAI,SAACC,EAAMC,GAClB,OACI,2BACI,wBAAKD,EAAKE,MACV,wBAAKF,EAAKL,QACV,wBAAKK,EAAKT,SACV,yBACI,mBAAQE,QAAS,WAAQL,GAASe,EAAAA,EAAAA,IAAcjB,EAAMY,KAAKG,GAAGC,IAAM,EAApE,mBAIf,WAMxB,C","sources":["../node_modules/react-bootstrap/esm/Table.js","routes/Cart.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","import { Table } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeName, increase } from \"./../store/userSlice.js\"\r\nimport { increaseCount } from \"./../store.js\"\r\nimport { memo, useMemo, useState } from \"react\";\r\n\r\n// 자식 컴포넌트 재렌더링 막기\r\n// memo = 꼭 필요할 때만 재렌더링 해줌\r\n// Child의 props가 변할 때만 재렌더링 해줌\r\nlet Child = memo(function() {\r\n    console.log('재렌더링됨');\r\n    return <div>자식임</div>\r\n});\r\n\r\nfunction 함수() {\r\n    return '반복문 10억번 돌린결과';\r\n}\r\n\r\nfunction Cart() {\r\n    // useMemo = 컴포넌트 렌더링시 1회만 실행해줌\r\n    let result = useMemo(() => { return 함수() }, [/* state */]);\r\n\r\n    let state = useSelector((state) => {\r\n        return state\r\n    });\r\n\r\n    // store.js로 요청 보내주는 함수\r\n    let dispatch = useDispatch();\r\n    let [count, setCount] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n            <Child count={count}></Child>\r\n            <button onClick={() => { setCount(count+1)} }>+</button>\r\n\r\n            <h6>{state.user.name} {state.user.age}의 장바구니</h6>\r\n            <button onClick={() => { dispatch(increase(1)) }}>버튼</button>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>상품명</th>\r\n                        <th>수량</th>\r\n                        <th>변경하기</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        state.item.map((data, i) => {\r\n                            return (\r\n                                < tr >\r\n                                    <td>{data.id}</td>\r\n                                    <td>{data.name}</td>\r\n                                    <td>{data.count}</td>\r\n                                    <td>\r\n                                        <button onClick={() => { dispatch(increaseCount(state.item[i].id)) }}>+</button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Cart;"],"names":["React","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","Child","memo","console","log","useMemo","state","useSelector","dispatch","useDispatch","useState","count","setCount","onClick","user","name","age","increase","item","map","data","i","id","increaseCount"],"sourceRoot":""}